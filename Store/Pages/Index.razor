@page "/"
@using Microsoft.Extensions.Caching.Memory
@inject IStoreBackendClient _storeBackendClient
@inject IMemoryCache _memoryCache

<PageTitle>Index</PageTitle>

<h1>Products in the store:</h1>


<table class="table">
    <thead>
        <tr>
            <th scope="col">Product</th>
            <th scope="col">Inventory</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var product in _products)
        {
            <tr>
                <td>@product.ProductName</td>
                <td>@product.Quantity</td>
            </tr>
        }
    </tbody>
</table>


@code
{
    List<Product> _products = new List<Product>();
    bool _shouldRender = false;
    protected override bool ShouldRender() => _shouldRender;
    const string cacheKey = "PRODUCTS";

    protected override async Task OnInitializedAsync()
    {
        Product[] tmp;
        if (!_memoryCache.TryGetValue(cacheKey, out tmp))
        {
            var products = await _storeBackendClient.GetProducts();
            foreach (var product in products)
            {
                product.Quantity = await _storeBackendClient.GetInventory(product.ProductId);
            }
            _products = products.ToList();
            _memoryCache.Set<Product[]>(cacheKey, _products.ToArray());
            tmp = _products.ToArray();
        }
        _products = tmp.ToList();


        //_products.Add(new Product()
        //    {
        //        ProductId = "containerapptestssecrets-aaaa",
        //        ProductName = await _storeBackendClient.GetSecret("containerapptestssecrets", "aaaa"),
        //        Quantity = 666
        //    });

        //_products.Add(new Product()
        //    {
        //        ProductId = "vaultsecrets-aaaa",
        //        ProductName = await _storeBackendClient.GetSecret("vaultsecrets", "aaaa"),
        //        Quantity = 666
        //    });

        _products.Add(new Product()
            {
                ProductId = "containerapptestssecrets-monkeyisland",
                ProductName = await _storeBackendClient.GetSecret("secretlair", "mysecret"),
                Quantity = 666
            }); 

        _products.Add(new Product()
            {
                ProductId = "daprurl",
                ProductName = (Environment.GetEnvironmentVariable("BASE_URL") ?? "http://localhost") + ":" + (Environment.GetEnvironmentVariable("DAPR_HTTP_PORT") ?? "3500").ToString(),
                Quantity = 666
            });

        _products.Add(new Product()
            {
                ProductId = "configstore",
                ProductName = await _storeBackendClient.GetConfiguration("aaaa", new List<string>() { "patata" }),
                Quantity = 666
            });

        // using var client = new DaprClientBuilder().Build();
        // var configuration = await client.GetConfiguration(CONFIG_STORE_NAME, new List<string>() { "orderId1", "orderId2" });
        // Console.WriteLine($"Got key=\n{configuration[0].Key} -> {configuration[0].Value}\n{configuration[1].Key} -> {configuration[1].Value}");
        

            
        //_products.Add(new Product()
        //    {
        //        ProductId = "vaultsecrets-patata",
        //        ProductName = await _storeBackendClient.GetSecret("vaultsecrets", "patata"),
        //        Quantity = 666
        //    }); 

        _shouldRender = true;
    }
}